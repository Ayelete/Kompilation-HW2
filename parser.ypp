%{
	#include <stdio.h>
	#include "output.hpp"
	
	int yylex();
	void yyerror(const char*)
	extern int yylineno;
	
	using namespace output;
%}

//Tokens declarations
%right VOID                             
%right INT                                
%right BYTE                               
%right B                                   
%right BOOL                                
%right OVERRIDE	
%right ASSIGN
%left OR   						
%left AND                               
%right NOT                                 
%left TRUE
%left FALSE
%right RETURN                           
%right IF                                  
%right ELSE                                
%right WHILE                               
%right BFREAK                               
%right CONTINUE                            
%right SC                                 
%right COMMA                                 
%left LPAREN RPAREN LBRACE RBRACE
%left RELOP
%left BINOP_AS
%left BINOP_MD 
%nonassoc ID 
%nonassoc NUM 
%nonassoc STRING               

%%
//Rules
Program : Funcs 																		{printProductionRule(1);}
Funcs : /*epsilon*/											    						{printProductionRule(2);}
		|FuncDecl Funcs																	{printProductionRule(3);}
FuncDecl: OverRide RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE			{printProductionRule(4);}	
OverRide : /*epsilon*/																	{printProductionRule(5);}
		 | OVERRIDE 																	{printProductionRule(6);}
RetType : Type 																			{printProductionRule(7);}						
		| VOID 																			{printProductionRule(8);}
Formals: /*epsilon*/																	{printProductionRule(9);}
			| FormalsList 																{printProductionRule(10);}
FormalsList: FormalDecl  																{printProductionRule(11);}
			| FormalDecl COMMA FormalsList   											{printProductionRule(12);}
FormalDecl: Type ID																		{printProductionRule(13);}
Statements: Statement   																{printProductionRule(14);}
			| Statements Statement														{printProductionRule(15);}
Statement: LBRACE Statements RBRACE														{printProductionRule(16);}
		   | Type ID SC																	{printProductionRule(17);}
		   | Type ID ASSIGN Exp SC														{printProductionRule(18);}
		   | ID ASSIGN Exp SC															{printProductionRule(19);}
		   | Call SC																	{printProductionRule(20);}
		   | RETURN SC																	{printProductionRule(21);}
		   | RETURN Exp SC																{printProductionRule(22);}
		   | IF LPAREN Exp RPAREN Statement												{printProductionRule(23);}
		   | IF LPAREN Exp RPAREN Statement ELSE Statement								{printProductionRule(24);}
		   | WHILE LPAREN Exp RPAREN Statement											{printProductionRule(25);}
		   | BREAK SC																	{printProductionRule(26);}
		   | CONTINUE SC																{printProductionRule(27);}
Call: ID LPAREN ExpList RPAREN															{printProductionRule(28);}
	| ID LPAREN RPAREN																	{printProductionRule(29);}
ExpList: Exp 																			{printProductionRule(30);}
		| Exp COMMA ExpList																{printProductionRule(31);}
Type: INT																				{printProductionRule(32);}
	| BYTE																				{printProductionRule(33);}
	| BOOL																				{printProductionRule(34);}
Exp: LPAREN Exp RPAREN																	{printProductionRule(35);}
	| Exp BINOP_AS Exp																	{printProductionRule(36);}
	| Exp BINOP_MD Exp																	{printProductionRule(36);}
	| ID																				{printProductionRule(37);}
	| Call																				{printProductionRule(38);}
	| NUM																				{printProductionRule(39);}
	| NUM B																				{printProductionRule(40);}
	| STRING																			{printProductionRule(41);}
	| TRUE																				{printProductionRule(42);}
	| FALSE																				{printProductionRule(43);}
	| NOT Exp																			{printProductionRule(44);}
	| Exp AND Exp																		{printProductionRule(45);}
	| Exp OR Exp																		{printProductionRule(46);}
	| Exp RELOP Exp																		{printProductionRule(47);}
	| LPAREN Type RPAREN Exp															{printProductionRule(48);}
		   
%%
//Functions

int main()
{
	return yyparse();
}

int yyerror(const char*)
{
	errorSyn(yylineno);
}
